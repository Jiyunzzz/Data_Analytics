# -*- coding: utf-8 -*-
"""CSE 163 Final Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HGIvplUc70huP6uPF0VP8_WVhR8REswj

# **Analyzing and Predicting Tech Stock Market Trends: A Study of the FAANG Companies**

## Data Preparation

### Relevant Variables


*   High: The highest price at which the stock traded during a specific period.
* Low: The lowest price at which the stock traded during a specific period.
* Open: The opening price of the stock at the beginning of a specific period.
* Close: The closing price of the stock at the end of a specific period.
* Volume: The number of shares traded during a specific period, representing the liquidity and market activity.
* Adj Close: The adjusted closing price, which accounts for any corporate actions (such as stock splits or dividends) that affect the stock price.

### Dataset 1: Yfinance

###### yfinance is a Python library that provides a simple and convenient way to access historical market data and financial information from Yahoo Finance. It allows users to fetch historical stock price data, financial statements, and other relevant information for stocks, indices, currencies, cryptocurrencies, and more.

##### The following code cells fetch historical stock data for the FAANG companies (META, AAPL, AMZN, NFLX, GOOGL) using the yfinance library. It specifies a date range from January 1, 2022, to May 1, 2023, and downloads the stock data for these companies during that period. The fetched data is stored in a pandas DataFrame called data, which includes various stock attributes such as "High," "Low," "Open," "Close," "Volume," and "Adj Close." The code then filters the data DataFrame to include only the desired variables: "High," "Low," "Open," "Close," "Volume," and "Adj Close." This filtered DataFrame is stored in the variable filtered_data. Finally, the code prints the filtered_data DataFrame, which displays the historical stock data for the specified FAANG companies and attributes within the specified date range.
"""

# install the pyfinance library
!pip install pyfinance

import yfinance as yf
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Define the tickers for the FAANG companies
tickers = ["META", "AAPL", "AMZN", "NFLX", "GOOGL"]

# Fetch historical stock data for the FAANG companies
data = yf.download(tickers, start="2023-01-01", end="2023-05-01")

# Filter the DataFrame to include only the desired variables
filtered_data = data[["High", "Low", "Open", "Close", "Volume", "Adj Close"]]

# Drop missing data
filtered_data.dropna(inplace=True)

"""Example to see if code above works:"""

# Print the filtered DataFrame without missing data
filtered_data

"""### Dataset 2: FAANG - Complete Stock Data

###### This dataset was acquired from Kaggle and it contains data of Stock of the FAANG companies from when they began trading. The data contains information such as opening price of a stock, closing price, how much of these stocks were sold and many more things. There are 5 different CSV files in the data for each company. This dataset contains the 5 relevant variables detailed above.
"""

import pandas as pd

# Read the dataframes
facebook_df = pd.read_csv('Kaggle_Data/Facebook.csv')
apple_df = pd.read_csv('Kaggle_Data/Apple.csv')
amazon_df = pd.read_csv('Kaggle_Data/Amazon.csv')
netflix_df = pd.read_csv('Kaggle_Data/Netflix.csv')
google_df = pd.read_csv('Kaggle_Data/Google.csv')

# Convert the date columns to datetime format
facebook_df['Date'] = pd.to_datetime(facebook_df['Date'])
apple_df['Date'] = pd.to_datetime(apple_df['Date'])
amazon_df['Date'] = pd.to_datetime(amazon_df['Date'])
netflix_df['Date'] = pd.to_datetime(netflix_df['Date'])
google_df['Date'] = pd.to_datetime(google_df['Date'])

# Filter the dataframes based on the time frame
start_date = pd.to_datetime('2017-01-01')
end_date = pd.to_datetime('2020-01-01')

facebook_df = facebook_df[(facebook_df['Date'] >= start_date) & (facebook_df['Date'] < end_date)]
apple_df = apple_df[(apple_df['Date'] >= start_date) & (apple_df['Date'] < end_date)]
amazon_df = amazon_df[(amazon_df['Date'] >= start_date) & (amazon_df['Date'] < end_date)]
netflix_df = netflix_df[(netflix_df['Date'] >= start_date) & (netflix_df['Date'] < end_date)]
google_df = google_df[(google_df['Date'] >= start_date) & (google_df['Date'] < end_date)]

# Remove missing data from the filtered dataframes
facebook_df = facebook_df.dropna()
apple_df = apple_df.dropna()
amazon_df = amazon_df.dropna()
netflix_df = netflix_df.dropna()
google_df = google_df.dropna()

"""Example to see if code above works:"""

print(facebook_df.head(5))

"""## Research Question 1: Analyzing the Stock Price Performance and Influencing Factors of FAANG Companies


1. How did the stock prices of the FAANG companies change over a span of 3 years?
2. Specifically, what was the percentage increase or decrease in each company's stock price during that time period?
3. Were there any significant events or announcements that influenced the stock prices of these companies during this period?

### Percentage Change, Adjusted Closing Price, and Total Volume Traded Over Time for FAANG Stocks from 2019 to 2020
"""

# Calculate the percentage change for each company
percentage_changes = {
    'Facebook': facebook_df['Close'].pct_change().iloc[-1] * 100,
    'Apple': apple_df['Close'].pct_change().iloc[-1] * 100,
    'Amazon': amazon_df['Close'].pct_change().iloc[-1] * 100,
    'Netflix': netflix_df['Close'].pct_change().iloc[-1] * 100,
    'Google': google_df['Close'].pct_change().iloc[-1] * 100
}

# Print the percentage change for each company
print("Percentage change expressed as decimals:")
for company, change in percentage_changes.items():
    print(f"{company}: {change}")

import matplotlib.pyplot as plt

# Extract the company names and percentage changes
companies = list(percentage_changes.keys())
changes = list(percentage_changes.values())

# Create a bar graph
plt.bar(companies, changes)
plt.xlabel('Company')
plt.ylabel('Percentage Change')
plt.title('Percentage Change - FAANG')
plt.xticks(rotation=45)

# Display the graph
plt.show()

# Plotting the stock's adjusted closing price using pandas
apple_df['Adj Close'].plot(legend=True, figsize=(12, 5))
plt.title("Adjusted Closing Price of Apple Stock")
plt.xlabel("Time")
plt.ylabel("Stock Price")
plt.show()

# Plotting the stock's adjusted closing price using pandas
amazon_df['Adj Close'].plot(legend=True, figsize=(12, 5))
plt.title("Adjusted Closing Price of Amazon Stock")
plt.xlabel("Time")
plt.ylabel("Stock Price")
plt.show()

# Plotting the stock's adjusted closing price using pandas
facebook_df['Adj Close'].plot(legend=True, figsize=(12, 5))
plt.title("Adjusted Closing Price of Meta Stock")
plt.xlabel("Time")
plt.ylabel("Stock Price")
plt.show()

# Plotting the stock's adjusted closing price using pandas
netflix_df['Adj Close'].plot(legend=True, figsize=(12, 5))
plt.title("Adjusted Closing Price of Netflix Stock")
plt.xlabel("Time")
plt.ylabel("Stock Price")
plt.show()

# Plotting the stock's adjusted closing price using pandas
google_df['Adj Close'].plot(legend=True, figsize=(12, 5))
plt.title("Adjusted Closing Price of Google Stock")
plt.xlabel("Time")
plt.ylabel("Stock Price")
plt.show()

#Plotting the total volume being traded over time
apple_df['Volume'].plot(legend=True,figsize=(12,5))
plt.title("Apple Stocks' Total Volume Traded Over Time")
plt.xlabel("Time")
plt.ylabel("Total Volume Traded")
plt.show()

#Plotting the total volume being traded over time
amazon_df['Volume'].plot(legend=True,figsize=(12,5))
plt.title("Amazon Stocks' Total Volume Traded Over Time")
plt.xlabel("Time")
plt.ylabel("Total Volume Traded")
plt.show()

#Plotting the total volume being traded over time
facebook_df['Volume'].plot(legend=True,figsize=(12,5))
plt.title("Meta Stocks' Total Volume Traded Over Time")
plt.xlabel("Time")
plt.ylabel("Total Volume Traded")
plt.show()

#Plotting the total volume being traded over time
google_df['Volume'].plot(legend=True,figsize=(12,5))
plt.title("Google Stocks' Total Volume Traded Over Time")
plt.xlabel("Time")
plt.ylabel("Total Volume Traded")
plt.show()

#Plotting the total volume being traded over time
netflix_df['Volume'].plot(legend=True,figsize=(12,5))
plt.title("Netflix Stocks' Total Volume Traded Over Time")
plt.xlabel("Time")
plt.ylabel("Total Volume Traded")
plt.show()

"""### Percentage Change, Adjusted Closing Price, and Total Volume Traded Over Time for FAANG Stocks from 2022 to 2023

The provided code calculates the percentage change in the stock prices of the FAANG companies (Facebook, Apple, Amazon, Netflix, and Google) over a specific time period. By subtracting the initial closing price from the final closing price, dividing it by the initial closing price, and multiplying by 100, the code calculates the percentage change for each company.
"""

# Calculate the percentage change for each company
percentage_changes = {
    'META': filtered_data["Adj Close"]["META"].iloc[-1] / filtered_data["Adj Close"]["META"].iloc[0] * 100 - 100,
    'AAPL': filtered_data["Adj Close"]["AAPL"].iloc[-1] / filtered_data["Adj Close"]["AAPL"].iloc[0] * 100 - 100,
    'AMZN': filtered_data["Adj Close"]["AMZN"].iloc[-1] / filtered_data["Adj Close"]["AMZN"].iloc[0] * 100 - 100,
    'NFLX': filtered_data["Adj Close"]["NFLX"].iloc[-1] / filtered_data["Adj Close"]["NFLX"].iloc[0] * 100 - 100,
    'GOOGL': filtered_data["Adj Close"]["GOOGL"].iloc[-1] / filtered_data["Adj Close"]["GOOGL"].iloc[0] * 100 - 100
}

# Print the percentage change for each company
print("Percentage change for each company: ")
for company, change in percentage_changes.items():
  print(f"{company}: {change:.2f}%")

# Create separate graphs for each company
fig, axes = plt.subplots(nrows=5, figsize=(10, 20))

# Iterate over each company and plot the percentage change
for i, column in enumerate(percentage_change.columns):
    axes[i].plot(percentage_change.index, percentage_change[column])
    axes[i].set_xlabel("Date")
    axes[i].set_ylabel("Percentage Change")
    axes[i].set_title(f"Percentage Change for {column}")
    axes[i].grid(True)

plt.tight_layout()
plt.show()

# Plotting the stock's adjusted closing price using pandas for 'AAPL'
filtered_data['Adj Close', 'AAPL'].plot(figsize=(12, 5))
plt.title("Adjusted Closing Price of Apple Stock")
plt.show()

# Plotting the stock's adjusted closing price using pandas for 'AAPL'
filtered_data['Adj Close', 'AMZN'].plot(figsize=(12, 5))
plt.title("Adjusted Closing Price of Amazon Stock")
plt.show()

# Plotting the stock's adjusted closing price using pandas for 'AAPL'
filtered_data['Adj Close', 'META'].plot(figsize=(12, 5))
plt.title("Adjusted Closing Price of META Stock")
plt.show()

# Plotting the stock's adjusted closing price using pandas for 'AAPL'
filtered_data['Adj Close', 'NFLX'].plot(figsize=(12, 5))
plt.title("Adjusted Closing Price of Netflix Stock")
plt.show()

# Plotting the stock's adjusted closing price using pandas for 'AAPL'
filtered_data['Adj Close', 'GOOGL'].plot(figsize=(12, 5))
plt.title("Adjusted Closing Price of Google Stock")
plt.show()

# Plotting the total volume being traded over time
filtered_data['Volume', 'AAPL'].plot(figsize=(12, 5))
plt.title("Apple Stocks' Total Volume Traded - 2023")
plt.show()

# Plotting the total volume being traded over time
filtered_data['Volume', 'AMZN'].plot(figsize=(12, 5))
plt.title("Amazon Stocks' Total Volume Traded - 2023")
plt.show()

# Plotting the total volume being traded over time
filtered_data['Volume', 'META'].plot(figsize=(12, 5))
plt.title("META Stocks' Total Volume Traded - 2023")
plt.show()

# Plotting the total volume being traded over time
filtered_data['Volume', 'NFLX'].plot(figsize=(12, 5))
plt.title("Netflix Stocks' Total Volume Traded - 2023")
plt.show()

# Plotting the total volume being traded over time
filtered_data['Volume', 'GOOGL'].plot(figsize=(12, 5))
plt.title("Google Stocks' Total Volume Traded - 2023")
plt.show()

"""### Significant Events or Announcements

1.   Facebook:
- Cambridge Analytica scandal: In March 2018, it was revealed that Cambridge Analytica, a political consulting firm, harvested personal data of millions of Facebook users without their consent. This event led to public outrage and raised concerns about user privacy, which had an impact on Facebook's stock price.
2.   Apple:
- iPhone X launch: In September 2017, Apple introduced the iPhone X, a major redesign of its flagship product. The anticipation and success of the iPhone X launch had a positive impact on Apple's stock price.
- Earnings announcements and product releases: Apple's stock price can be influenced by its quarterly earnings reports, product releases, and announcements related to new features, upgrades, or expansions of its product line.

3. Amazon:
- Whole Foods acquisition: In June 2017, Amazon acquired the grocery store chain Whole Foods Market. This acquisition signaled Amazon's entry into the brick-and-mortar retail industry and had an impact on both Amazon's stock price and the broader grocery sector.
- Prime Day events: Amazon's annual Prime Day, which typically occurs in July, offers significant discounts and deals to Amazon Prime members. Positive reception and strong sales during these events can affect Amazon's stock price.

4. Netflix:
- Content announcements and subscriber growth: Netflix's stock price can be influenced by announcements regarding new content releases, original series, partnerships, and international expansion.
- Additionally, fluctuations in subscriber growth numbers may impact investor sentiment and the stock price

5. Google (Alphabet Inc.):
- Antitrust investigations: Google has faced antitrust investigations and regulatory scrutiny in various regions, including the European Union. These investigations and the resulting fines or regulatory actions can impact Google's stock price.
- Earnings reports and advertising trends: Google's stock price can be influenced by its quarterly earnings reports and trends in the online advertising market, as advertising revenue is a significant source of Google's income.

## Research Question 2: Analyzing Average Daily Returns for FAANG Companies in the First Quarter of 2023 and Comparing with Historical Trends

1. What was the average daily return for each of the FAANG companies in the first quarter of 2023?
2. How does this average compare to each company's average daily return from data from 2017 to 2020?
3. Can we identify any patterns or trends in the daily returns of these companies during this period?

### Average Daily Return for each FAANG company in first quarter of 2023.

#### Using Yfinance dataset
"""

# Calculate daily returns for each stock
daily_returns = filtered_data["Adj Close"].pct_change()

# Filter the DataFrame to include only the first quarter of 2023
first_quarter_returns = daily_returns["2023-01-01":"2023-03-31"]

# Calculate the average daily return for each stock in the first quarter
average_returns = first_quarter_returns.mean()

# Print the average daily return for each stock
print("Average Daily Returns for FAANG Companies (Q1 2023):\n")
print(average_returns)

"""### Average Daily Return from 2017 to 2020

#### Using Kaggle dataset
"""

# Calculate the daily returns for each company
facebook_df['Daily Return'] = facebook_df['Close'].pct_change()
apple_df['Daily Return'] = apple_df['Close'].pct_change()
amazon_df['Daily Return'] = amazon_df['Close'].pct_change()
netflix_df['Daily Return'] = netflix_df['Close'].pct_change()
google_df['Daily Return'] = google_df['Close'].pct_change()

# Calculate the average daily return for each company
average_returns = {
    'Facebook': facebook_df['Daily Return'].mean(),
    'Apple': apple_df['Daily Return'].mean(),
    'Amazon': amazon_df['Daily Return'].mean(),
    'Netflix': netflix_df['Daily Return'].mean(),
    'Google': google_df['Daily Return'].mean()
}

# Print the average daily return for each company
for company, avg_return in average_returns.items():
    print(f"{company}: {avg_return}")

"""## Research Question 3: Comparison of Moving Averages among FAANG Companies
1. What was the 50-day moving average for each of the FAANG companies between January 1st, 2021 and May 10th, 2023?
2. How did these moving averages change over time, and were there any notable deviations from each company's overall trend?
3. Can we identify any patterns or trends in the daily returns of these companies during this period?

#### 10, 20, and 50 - Day Moving Average for each FAANG Stock
"""

# Calculate the 10-day moving average for each stock
moving_average_10 = filtered_data["Adj Close"].rolling(window=10).mean()

# Calculate the 20-day moving average for each stock
moving_average_20 = filtered_data["Adj Close"].rolling(window=20).mean()

# Calculate the 50-day moving average for each stock
moving_average_50 = filtered_data["Adj Close"].rolling(window=50).mean()

# Print the moving averages
print("Moving Averages for FAANG Companies:\n")
print("10-day Moving Average:\n")
print(moving_average_10.tail())
print("\n20-day Moving Average:\n")
print(moving_average_20.tail())
print("\n50-day Moving Average:\n")
print(moving_average_50.tail())

"""### Analyzing the Moving Averages and Identifying Notable Deviations"""

# Plot the 50-day moving averages
plt.figure(figsize=(10, 6))  # Adjust the figure size as needed
for company in moving_average_50.columns:
    plt.plot(filtered_data.index, moving_average_50[company], label=company)

# Customize the plot
plt.xlabel('Date')
plt.ylabel('50-day Moving Average')
plt.title('50-day Moving Averages for FAANG Companies')
plt.legend()

# Display the plot
plt.show()

# Analyzing deviations from overall trend
for company in moving_average_50.columns:
    deviations = filtered_data["Adj Close"][company] - moving_average_50[company]
    deviations_percentage = deviations / filtered_data["Adj Close"][company] * 100

    # Plot deviations from the moving average
    plt.figure(figsize=(10, 6))
    plt.plot(filtered_data.index, deviations_percentage, label=company)
    plt.xlabel('Date')
    plt.ylabel('Deviation from 50-day Moving Average (%)')
    plt.title(f'Deviations from 50-day Moving Average for {company}')
    plt.legend()
    plt.show()

"""## Research Question 4: Analysis of Correlation and Predictability of FAANG Companies' Daily Returns

1. What was the correlation between the daily returns of the FAANG companies over the past year?

2. Did this correlation change significantly during certain time periods, and can we identify any factors that influenced this change?

### Correlation Between Daily Returns of FAANG Companies from Quarter 1
"""

# Calculate the correlation matrix for the first quarter returns
correlation_matrix = first_quarter_returns.corr()

# Print the correlation matrix
print("Correlation Matrix for FAANG Companies (Q1 2023):\n")
print(correlation_matrix)

# Plot the correlation matrix as a heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm", linewidths=0.5)
plt.title("Correlation Matrix for FAANG Companies (Q1 2023)")
plt.show()

"""### Correlation Between Daily Returns of FAANG Companies Over the Past Year"""

# Calculate the correlation matrix for the entire year
correlation_matrix2 = percentage_change.corr()

# Print the correlation matrix
print("Correlation Matrix for FAANG Companies (2022 - ):\n")
print(correlation_matrix2)

# Plot the correlation matrix as a heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(correlation_matrix2, annot=True, cmap="coolwarm", linewidths=0.5)
plt.title("Correlation Matrix for FAANG Companies (2022 to 2023)")
plt.show()

"""## Research Question 5:  Developing a Predictive Model for Future Stock Behavior of FAANG Companies Using Historical Data

1. Using historical data, how can we develop a predictive model for the future stock behavior of each of the FAANG companies?
2. Specifically, how can we identify any key performance indicators or market trends that have historically influenced the stock prices of these companies?


"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

# Prepare the data for modeling
X = filtered_data.drop("Close", axis=1)  # Features (High, Low, Open, Volume, Adj Close)
y = filtered_data["Close"]  # Target variable (Close price)

# Create and train a separate model for each company
models = {}
predictions = {}
mse_values = {}  # Dictionary to store MSE values

for ticker in tickers:
    X_train, X_test, y_train, y_test = train_test_split(X, y[ticker], test_size=0.2, random_state=42)
    model = LinearRegression()
    model.fit(X_train, y_train)
    models[ticker] = model
    predictions[ticker] = model.predict(X_test)
    mse_values[ticker] = mean_squared_error(y_test, predictions[ticker])

# Print the MSE values for each company
for ticker, mse in mse_values.items():
    print("Mean Squared Error for", ticker, ":", mse)

# Visualize the predicted prices for each company
plt.figure(figsize=(12, 8))
for ticker in tickers:
    plt.plot(predictions[ticker], label=ticker)
plt.title("Predicted Stock Prices for FAANG Companies")
plt.xlabel("Time")
plt.ylabel("Stock Price")
plt.legend()
plt.show()

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
import numpy as np
import matplotlib.pyplot as plt

# Prepare the data for modeling
X = filtered_data.drop("Close", axis=1)  # Features (High, Low, Open, Volume, Adj Close)
y = filtered_data["Close"]  # Target variable (Close price)

# Create and train a separate model for each company
models = {}
predictions = {}
mse_values = {}

for ticker in tickers:
    X_train, X_test, y_train, y_test = train_test_split(X, y[ticker], test_size=0.2, random_state=42)
    model = RandomForestRegressor(random_state=42)
    model.fit(X_train, y_train)
    models[ticker] = model
    predictions[ticker] = model.predict(X_test)
    mse_values[ticker] = mean_squared_error(y_test, predictions[ticker])

# Print the MSE values for each company
for ticker, mse in mse_values.items():
    print("Mean Squared Error for", ticker, ":", mse)

# Visualize the predicted prices for each company
plt.figure(figsize=(12, 8))
for ticker in tickers:
    plt.plot(predictions[ticker], label=ticker)

plt.title("Predicted Stock Prices for FAANG Companies (Random Forest Regressor)")
plt.xlabel("Time")
plt.ylabel("Stock Price")
plt.legend()

plt.show()
